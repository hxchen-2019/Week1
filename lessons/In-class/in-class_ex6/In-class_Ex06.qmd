---
title: "In Class Exercise 6"
author: "Hao Xian"
date: "13 February 2023"
date-modified: '`r Sys.Date()`'
format: html
number-sections: true
execute: 
  echo: true
  eval: true
  message: false
  warning: false
  
editor: visual
---

::: callout-important
We will be using sfdep in In-Class-Excercise instead of spded in Hands On Excercise
:::

# Loading the packages

```{r}
pacman::p_load(sf, tmap, sfdep, tidyverse)
```

# The data

## Importing the Geospatial data

::: callout-note
This file is loaded as a sf dataframe
:::

```{r}
hunan <- st_read(dsn = "data/geospatial", 
                 layer = "Hunan")
```

## Importing GeoSpatial

::: callout-note
This input is recorded as tibble dataframe
:::

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Combining both data frame by using left join

::: callout-note
In order to retain the geospatial properties, the left data frame must be the sf data frame.

We need to make sure that the name is the same, it is Case-Sensitive!!
:::

```{r}
hunan_GDPPC <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

### Plotting a Choropleth map

```{r}
tmap_mode("plot") 
tm_shape(hunan_GDPPC) +
  tm_fill("GDPPC",
          style = "quantile",
          palette = "Blues",
          title = "GDPPC") +
  tm_layout(main.title = "Distribution of GDP per capita by district, Hunan Province", 
            main.title.position = "center",
            main.title.size = 1.2,
            legend.height = 0.45,
            legend.width = 0.35,
            frame = TRUE) +
  tm_borders(alpha = 0.5) +
  tm_compass(type="8star", size = 2) +
  tm_scale_bar() +
  tm_grid(alpha = 0.2)
```

## Identify area Neighbours

### Calculating Contiguit neighbour methods

::: callout-note
The code junk below uses st_contiguity is used to derive a contiguity neighbour list using Queen's method.

The code chunk below will store the results into a new sf data frame at the first column (.before = 1\_
:::

### Queens Methods

```{r}
nb_queen <- hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry),
         .before = 1)
```

```{r}
summary(nb_queen$nb)
```

We can view the first 10 values

```{r}
nb_queen
```

Lets review the name of the neighbouring polygons

```{r}
nb_queen$County[c(2,3,4,57,85)]
```

### Rooks Methods

```{r}
nb_rook <- hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry,
                            queen = FALSE),
         .before = 1)
```

### Indentifying Higher order neighbours

```{r}
nb2_queen <-  hunan_GDPPC %>% 
  mutate(nb = st_contiguity(geometry),
         nb2 = st_nb_lag_cumul(nb, 2),
         .before = 1)
```

```{r}
nb2_queen
```

## Computing contiguity weights

### Queens Method

```{r}
wm_q <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wt = st_weights(nb,
                         style = "W"),
         .before = 1) 
```

```{r}
wm_q
```

### Rooks Method

```{r}
wm_r <- hunan %>%
  mutate(nb = st_contiguity(geometry,
                            queen = FALSE),
         wt = st_weights(nb),
         .before = 1) 
```

# Distance-based Weights

## Deriving fixed distance weight

```{r}
geo <- sf::st_geometry(hunan_GDPPC)
nb <- st_knn(geo, longlat = TRUE)
dists <- unlist(st_nb_dists(geo, nb))
```

::: callout-note
-   [`st_nb_dists()`](https://sfdep.josiahparry.com/reference/st_nb_dists.html) of sfdep is used to calculate the nearest neighbour distance. The output is a list of distances for each observation's neighbors list.

-   [`unlist()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist) of Base R is then used to return the output as a vector so that the summary statistics of the nearest neighbour distances can be derived
:::

```{r}
summary(dists)
```

Since the max value is 65.80, we can use the threshold value of 66km.

In the function there is 2 things to note:

-   [`st_dists_band()`](https://sfdep.josiahparry.com/reference/st_dist_band.html) of sfdep is used to identify neighbors based on a distance band (i.e. 66km). The output is a list of neighbours (i.e. nb).

-   [`st_weights()`](https://sfdep.josiahparry.com/reference/st_weights.html) is then used to calculate polygon spatial weights of the nb list. Note that:

    -   the default `style` argument is set to "W" for row standardized weights, and

    -   the default `allow_zero` is set to TRUE, assigns zero as lagged value to zone without neighbors.

```{r}
wm_fd <- hunan_GDPPC %>%
  mutate(nb = st_dist_band(geometry,
                           upper = 66),
               wt = st_weights(nb),
               .before = 1)
```

## Deriving adaptive distance weight

There is a few things to note in the function used to compute the adaptive distance weighjt

-   [`st_knn()`](https://sfdep.josiahparry.com/reference/st_knn.html) of sfdep is used to identify neighbors based on k (i.e. k = 8 indicates the nearest eight neighbours). The output is a list of neighbours (i.e. nb).

-   [`st_weights()`](https://sfdep.josiahparry.com/reference/st_weights.html) is then used to calculate polygon spatial weights of the nb list. Note that:

    -   the default `style` argument is set to "W" for row standardized weights, and

    -   the default `allow_zero` is set to TRUE, assigns zero as lagged value to zone without neighbors

```{r}
wm_ad <- hunan_GDPPC %>% 
  mutate(nb = st_knn(geometry,
                     k=8),
         wt = st_weights(nb),
               .before = 1)
```

## Calculate inverse distance weight

When calculatinf inverse distance weight , this are variable to note.

-   [`st_contiguity()`](https://sfdep.josiahparry.com/reference/st_contiguity.html) of sfdep is used to identify the neighbours by using contiguity criteria. The output is a list of neighbours (i.e. nb).

-   [`st_inverse_distance()`](https://sfdep.josiahparry.com/reference/st_inverse_distance.html) is then used to calculate inverse distance weights of neighbours on the nb list.

```{r}
wm_idw <- hunan_GDPPC %>%
  mutate(nb = st_contiguity(geometry),
         wts = st_inverse_distance(nb, geometry,
                                   scale = 1,
                                   alpha = 1),
         .before = 1)
```
