---
title: "In Class Excercise 2"
date: "16 January 2023"
date-modified: '`r Sys.Date()`'
format: html
number-sections: true

execute: 
  message: false
  warning: false
  echo: true
  eval: true
  
editor: visual
---

## Importing Packages

::: callout-note
Installing all the different packages
:::

```{r}
#| code-fold: true
#| code-summary: "Show the Code"

pacman::p_load(sf, tidyverse, funModeling)
```

### Importing Geospatial

::: callout-note
We want to import the RGA data file
:::

```{r}
#| code-fold: true
#| code-summary: "Show the Code"
geoNGA <- st_read("data/geospatial/", layer = "geoBoundaries-NGA-ADM2") %>%
  st_transform(crs = 26392)
```

::: callout-note
Same Information being loaded but from different sources. They have the same number of observable records but different number of variable. This data is preferred as the data provide State Data and LGA as well.
:::

```{r}
#| code-fold: true
#| code-summary: "Show the Code"
NGA <- st_read("data/geospatial/", layer = "nga_admbnda_adm2_osgof_20190417") %>%
  st_transform(crs = 26392)
```

### Reading the water point data

::: callout-note
There is 2 function i the read_csv function tehre is 2
:::

```{r}
wp_nga <- read_csv("data/aspatial/Wpdx.csv") %>% 
  filter(`#clean_country_name` == "Nigeria")
```

#### Converting water point data into sf point features

1\) For

::: callout-note
You can take the latitude degree and the longitude degree to convert sf point. (Please reference Hands on Excersie 2 for the code).

New Georeference Column store tb
:::

```{r}
wp_nga$Geometry = st_as_sfc(wp_nga$`New Georeferenced Column`)
wp_nga
```

::: callout-note
Extract from tibbler dataframe into a sf dataframe. Converting from tibbler to sf dataframe require the projection information. (
:::

```{r}
wp_sf <- st_sf (wp_nga, crs=4326)
wp_sf
```

::: callout-note
Transform the projection to wgs84
:::

```{r}
wp_sf <- wp_sf %>%
  st_transform(crs = 26392)

wp_sf
```

## Geospatial Data Cleaning

### Excluding the redundent fields

::: callout-note
Retain column 3,4,8,9 only.
:::

```{r}
NGA <- NGA %>%
  select(c(3:4, 8:9))
```

### Check for duplicate name

::: callout-note
This step is to check for the quality of the data. This is to check for if any field if there is any duplicate
:::

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]
```

In this case there appears to be 6 duplicated LGA.

```{r}
NGA$ADM2_EN[94] <- "Bassa, Kogi"
NGA$ADM2_EN[95] <- "Bassa, Plateau"
NGA$ADM2_EN[304] <- "Ifelodun, Kwara"
NGA$ADM2_EN[305] <- "Ifellodun, Osun"
NGA$ADM2_EN[355] <- "Irepodun, Kwara"
NGA$ADM2_EN[356] <- "Irepodun, Osun"
NGA$ADM2_EN[519] <- "Nasarawa, Kano"
NGA$ADM2_EN[520] <- "Nasarawa, Nasarawa"
NGA$ADM2_EN[546] <- "Obi, Benue"
NGA$ADM2_EN[547] <- "Obi, Nasarawa"
NGA$ADM2_EN[693] <- "Surulere, Lagos"
NGA$ADM2_EN[694] <- "Surulere, Oyo"
```

```{r}
NGA$ADM2_EN[duplicated(NGA$ADM2_EN)==TRUE]
```

## Data Wrangling for Water Data Point

```{r}
freq(data = wp_sf, input = "#status_clean")
```

::: callout-note
mutate allow us to perform data preprocessing
:::

```{r}
wp_sf_nga <- wp_sf %>%
  rename(status_clean = "#status_clean") %>%
  select(status_clean) %>%
  mutate(status_clean = replace_na(status_clean, "unknown"))
```

### Extracting water Point Data

#### Functional

```{r}
wp_functional <- wp_sf_nga %>%
  filter(status_clean %in%
        c("Functional",
          "Functional but not in use",
          "Functional but needs repair"))
```

#### Non Functional

```{r}
wp_nonfunctional <- wp_sf_nga %>%
  filter(status_clean %in%
        c("Abandoned/Decommissioned",
          "Abandoned",
          "Non-Functional due to dry season",
          "Non-Functional",
          "Non functional due to dry season"))

```

#### Unknown

```{r}
wp_unknown <- wp_sf_nga %>%
  filter(status_clean %in%
           c("unknown"))
```

#### Combining into a single dataframe

::: callout-note
This give the total number of waterpoints that falls inside each NGA by comparing the dataset with theorginal NGA dataset and appending it into a new field in NGA_wp
:::

```{r}
NGA_wp <- NGA %>%
  mutate(`total_wp` = lengths( 
    st_intersects(NGA, wp_sf_nga))) %>%
  mutate(`wp_functional` = lengths(
    st_intersects(NGA, wp_functional))) %>%
  mutate(`non_functional` = lengths(
    st_intersects(NGA, wp_nonfunctional))) %>%
  mutate(`wp_unknown` = lengths(
    st_intersects(NGA, wp_unknown)))
```

### Saving the analytical data in RDS format

```{r}
write_rds(NGA_wp,"data/rds/NGA_wp.rds")
```

### Plotting

```{r}
ggplot(data = NGA_wp, aes(x= total_wp)) +
  geom_histogram(bins=20, color="black", fill = "light blue") +
  geom_vline(aes(xintercept=mean(total_wp, na.rm=T)), color ="red",linetype="dashed", size=0.8) + 
  ggtitle("Distribution of total water points by LGA")+
  xlab("No. of water points") + 
  ylab("No of \nLGAs") + 
  theme(axis.title.y=element_text(angle = 0))
```
